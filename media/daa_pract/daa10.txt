#include <bits/stdc++.h>
using namespace std;

bool isSafe(int node, int color[], bool graph[101][101], int n, int col) {
    for (int k = 0; k < n; k++) {
        if (k != node && graph[k][node] == 1 && color[k] == col) {
            return false;
        }
    }
    return true;
}

bool solve(int node, int color[], int m, int N, bool graph[101][101]) {
    if (node == N) {
        return true;
    }

    for (int i = 1; i <= m; i++) {
        if (isSafe(node, color, graph, N, i)) {
            color[node] = i;
            if (solve(node + 1, color, m, N, graph)) return true;
            color[node] = 0;
        }
    }
    return false;
}

bool graphColoring(bool graph[101][101], int m, int N) {
    int color[N] = {0};
    if (solve(0, color, m, N, graph)) return true;
    return false;
}

int main() {
    int N, m, E;  // N: vertices, m: colors, E: edges

    cout << "Enter the number of vertices: ";
    cin >> N; //n=4
    cout << "Enter the number of colors: ";
    cin >> m; //m=3
    cout << "Enter the number of edges: ";
    cin >> E; //E=5

    bool graph[101][101];
    memset(graph, false, sizeof graph);

    cout << "Enter the edges (u v) where 0 <= u, v < N:\n";  //{(0,1)(1,2)(2,3)(3,0)(0,2)}
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        graph[u][v] = 1;
        graph[v][u] = 1;
    }

    cout << graphColoring(graph, m, N) << endl;

    return 0;
}

// Enter the number of vertices: 4
// Enter the number of colors: 3
// Enter the number of edges: 5
// Enter the edges (u v) where 0 <= u, v < N:
// 0 1
// 1 2
// 2 3
// 3 0
// 0 2