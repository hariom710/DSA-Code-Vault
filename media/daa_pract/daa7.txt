#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9;  // A large value representing infinity

int tsp(int mask, int pos, vector<vector<int>>& dist, vector<vector<int>>& dp) {
    int n = dist.size();

    // Base Case: If all cities have been visited, return cost to return to the start
    if (mask == (1 << n) - 1) {
        return dist[pos][0];  // Cost to return to the starting city
    }

    // If this state has already been computed, return its value
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    // Initialize the result to infinity
    int ans = INF;

    // Try visiting all unvisited cities from the current city
    for (int city = 0; city < n; city++) {
        if ((mask & (1 << city)) == 0) {  // If the city has not been visited
            int newAns = dist[pos][city] + tsp(mask | (1 << city), city, dist, dp);
            ans = min(ans, newAns);
        }
    }

    // Store and return the result
    return dp[mask][pos] = ans;
}

int main() {
    int n;
    cout << "Enter the number of cities: ";
    cin >> n;

    // Initialize the distance matrix
    vector<vector<int>> dist(n, vector<int>(n));
    cout << "Enter the distance matrix:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> dist[i][j];
        }
    }

    // DP table to store results of subproblems
    vector<vector<int>> dp(1 << n, vector<int>(n, -1));

    // Start the TSP from city 0 with only city 0 visited (mask = 1)
    int result = tsp(1, 0, dist, dp);

    cout << "Minimum cost: " << result << endl;

    return 0;
}

// Enter the number of cities: 4
// Enter the distance matrix:
// 0 10 15 20
// 10 0 35 25
// 15 35 0 30
// 20 25 30 0